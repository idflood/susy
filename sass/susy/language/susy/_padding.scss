// Padding Syntax
// ==============

// Prefix
// ------
// Add spanning-padding before an element.
// - $span  : <span>
@mixin prefix(
  $span
) {
  $span   : if(type-of($span) == map, $span, parse-span($span));
  $span   : map-merge((spread: wide), $span);
  $flow   : susy-get(flow, $span);
  $width  : span($span);

  @if is-inside($span) {
    $gutter: gutter($span);
    $width: if($gutter and comparable($width, $gutter), $width + $gutter, $width);
  }

  @include padding-output($width, null, $flow);
}

// Suffix
// ------
// Add spanning-padding after an element.
// - $span  : <span>
@mixin suffix(
  $span
) {
  $span   : if(type-of($span) == map, $span, parse-span($span));
  $span   : map-merge((spread: wide), $span);
  $flow   : susy-get(flow, $span);
  $width  : span($span);

  @if is-inside($span) {
    $gutter: gutter($span);
    $width: if($gutter and comparable($width, $gutter), $width + $gutter, $width);
  }

  @include padding-output(null, $width, $flow);
}

// Pad
// ---
// Add spanning-padding before and after an element.
// - $pre     : <span>
// - [$post]  : <span>
@mixin pad(
  $pre,
  $post: false
) {
  $pre: if(type-of($pre) == map, $pre, parse-span($pre));
  $pre: map-merge((spread: wide), $pre);

  @if $post {
    $post: if(type-of($post) == map, $post, parse-span($post));
    $post: map-merge((spread: wide), $post);
  } @else {
    $span: susy-get(span, $pre);
    @if length($span) > 1 {
      $pre: map-merge($pre, (span: nth($span, 1)));
      $post: map-merge($pre, (span: nth($span, 2)));
    } @else {
      $post: $pre;
    }
  }

  @include prefix($pre);
  @include suffix($post);
}
