// Row Start & End
// ===============


// Break
// -----
// Apply to any element that should force a line break.
@mixin break {
  @include output((clear: both));
}


// NoBreak
// -------
// Cancel the break() effect, e.g. when using media queries.
@mixin nobreak {
  @include output((clear: none));
}


// Full
// ----
// - [$context]: <layout shorthand>
@mixin full(
  $context: $susy
) {
  @include span(full of parse-grid($context) break);
}


// First
// -----
// - [$context]: <settings>
@mixin first(
  $context: $susy
) {
  $context: if(type-of($context) == map, $context, parse-grid($context));
  $flow: susy-get(flow, $context);

  @if not is-split($context) {
    @include float-first($flow);
  }
}

@mixin alpha(
  $context: $susy
) {
  @include first($context);
}


// Last
// ----
// - [$context]: <settings>
@mixin last(
  $context: $susy
) {
  $context: if(type-of($context) == map, $context, parse-grid($context));
  $output: (
    flow: susy-get(flow, $context),
    margin: if(is-split($context), null, 0),
  );

  @include float-last($output...);
}

@mixin omega(
  $context: $susy
) {
  @include last($context);
}


// Get Edge
// --------
// Calculate edge value based on location, if possible
@function get-edge(
  $span
) {
  $span: if(type-of($span) == map, $span, parse-span($span));
  @if map-has-key($span, get-edge) {
    @return map-get($span, get-edge);
  }

  $edge       : susy-get(edge, $span);
  @if not $edge {

    $count: susy-count(susy-get(columns, $span));
    $n: susy-get(span, $span);
    @if $n == $count {
      @return full;
    }

    $location: susy-get(location, $span);

    @if $location and $n {
      $number: if(type-of($location) == number, true, false);
      $index: if($number and unitless($location), true, false);
      @if $index {
        @if $location == 1 {
          @return if($n == $count, full, first);
        } @else if $location + $n - 1 == $count {
          @return last;
        }
      }
    }
  }

  @if $edge == alpha or $edge == omega {
    @return if($edge == alpha, first, last);
  }

  @return $edge;
}


// Get Location
// ------------
// Calculate location value based on edge, if possible
@function get-location(
  $span
) {
  $span       : if(type-of($span) == map, $span, parse-span($span));
  @if map-has-key($span, get-location) {
    @return map-get($span, get-location);
  }

  $edge       : get-edge($span);
  $location   : susy-get(location, $span);

  @if not $edge or $location {
    @return $location;
  }

  $n: susy-get(span, $span);

  @if type-of($n) == number and unitless($n) {
    @if $edge == first {
      $location: 1;
    } @else if $edge == last {
      $location: susy-count(susy-get(columns, $span)) - $n + 1;
    }
  }

  @return $location
}
